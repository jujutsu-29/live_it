// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime? @default(now())
  accounts      Account[]
  sessions      Session[]
  videos    Video[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // for YouTube API
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum JobStatus {
  pending
  processing
  done
  failed
}

model VideoJob {
  id        Int      @id @default(autoincrement())
  videoId   String
  video      Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  status    JobStatus  @default(pending)
  s3Key     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([videoId])
  @@map("video_jobs")
}

enum VideoStatus {
  active
  deleted
  streaming
  stopped
  failed
}

model Video {
  id          String   @id @default(cuid())
  userId      String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  url         String
  s3Key        String?
  title       String
  description String?
  addedDate   DateTime    @default(now())
  thumbnail   String?
  status      VideoStatus   @default(active)
  duration    Int?        
  size        String?       
  jobs         VideoJob[]

  live_startedAt DateTime?
  live_stoppedAt DateTime?
  live_streamKey String?   

  @@index([userId])
  @@map("videos")
}

